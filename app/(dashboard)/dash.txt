https://v0.dev/t/4obOQWo6vSt

// app/dashboard/utazasok-modositasa/page.jsx
import { doc, getDoc } from "firebase/firestore";
import { db } from "@/firebase";
import withAuth from "@/app/(auth)/withAuth";
import CalendarView from "@/components/calendar-view";

const Dashboard = async () => {
  try {
    const docRef = doc(db, "adatok", "utazasaink");
    const docSnapshot = await getDoc(docRef);
    const data = docSnapshot.data()?.utak || [];

    // Helper function to parse and format dates
    const parseDate = (dateField) => {
      let date;
      if (dateField && typeof dateField.toDate === "function") {
        // It's a Firebase Timestamp
        date = dateField.toDate();
      } else if (dateField && dateField.seconds && dateField.nanoseconds) {
        // It's a Firestore Timestamp-like object
        date = new Date(dateField.seconds * 1000 + dateField.nanoseconds / 1000000);
      } else if (dateField instanceof Date) {
        // It's already a Date object
        date = dateField;
      } else if (typeof dateField === "string") {
        // It's a string, attempt to parse it
        date = new Date(dateField);
      } else {
        console.warn("Unable to parse date:", dateField);
        return null;
      }

      // Format date as YYYY.MM.DD
      return date.toISOString().split("T")[0].replace(/-/g, ".");
    };

    const trips = data.map((item) => ({
      id: item.id,
      title: item.cim,
      startDate: parseDate(item.datum.kezdo),
      endDate: parseDate(item.datum.veg),
    }));

    // Filter out trips with invalid dates
    const validTrips = trips.filter((trip) => trip.startDate && trip.endDate);

    // Sort trips by startDate in ascending order
    validTrips.sort((a, b) => a.startDate.localeCompare(b.startDate));

    return (
      <div className="container my-10 space-y-10">
        <h2 className="text-2xl font-bold mb-4">Közelgő utazások</h2>
        <CalendarView trips={validTrips} />
      </div>
    );
  } catch (error) {
    console.error("Error fetching trips:", error);
    return <div>Error loading trips. Please try again later.</div>;
  }
};

export default withAuth(Dashboard);
